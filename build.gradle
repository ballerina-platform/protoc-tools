/*
 * Copyright (c) 2022, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

plugins {
    id 'java'
    id 'jacoco'
    id "com.github.spotbugs" version "${githubSpotbugsVersion}"
    id "com.github.johnrengelman.shadow" version "${githubJohnrengelmanShadowVersion}"
    id "de.undercouch.download" version "${underCouchDownloadVersion}"
    id "net.researchgate.release" version "${researchgateReleaseVersion}"
}

def packageName = "protoc"

dependencies {
    implementation project(':protoc-tool-idl-plugin')
    implementation project(':protoc-cli')
}

allprojects {
    group = project.group
    version = project.version

    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/*'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url = 'https://mvnrepository.com/artifact/org.testng/testng'
        }
    }

    ext {
        snapshotVersion= '-SNAPSHOT'
        timestampedVersionRegex = '.*-\\d{8}-\\d{6}-\\w.*\$'
    }
}

subprojects {
    apply plugin: 'java'
    configurations {
        externalJars
        ballerinaStdLibs
    }
}

def moduleVersion = project.version.replace("-SNAPSHOT", "")

release {
    versionPropertyFile = 'gradle.properties'
    tagTemplate = 'v${version}'
    git {
        // To release from any branch
        requireBranch = "release-${moduleVersion}"
        pushToRemote = 'origin'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task codeCoverageReport(type: JacocoReport) {
    dependsOn = subprojects.test

    executionData fileTree(project.rootDir.absolutePath).include("**/build/coverage-reports/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {
        xml.enabled(true)
        html.enabled(true)
        csv.enabled(true)
        xml.destination(new File("${buildDir}/reports/jacoco/report.xml"))
        html.destination(new File("${buildDir}/reports/jacoco/report.html"))
        csv.destination(new File("${buildDir}/reports/jacoco/report.csv"))
    }

    onlyIf = {
        true
    }
}

def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def targetProtocCliJar = file("$project.rootDir/protoc-cli/build/libs/protoc-cli-${project.version}.jar")
def targetProtocIDLPluginJar = file("$project.rootDir/protoc-tool-idl-plugin/build/libs/" +
        "protoc-tool-idl-plugin-${project.version}.jar")

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task directoryBuild {
    inputs.dir file(project.projectDir)
    doLast {
        copy {
            from targetProtocCliJar
            into file("$artifactLibParent/libs")
        }
        copy {
            from targetProtocIDLPluginJar
            into file("$artifactLibParent/libs")
        }
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactLibParent
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("${buildDir}/distributions")
    from directoryBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/protoc-tools")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

directoryBuild.dependsOn ":${packageName}-cli:build"
directoryBuild.dependsOn ":${packageName}-tool-idl-plugin:build"
directoryBuild.dependsOn(compileJava)
directoryBuild.dependsOn(compileTestJava)
directoryBuild.dependsOn(jar)
directoryBuild.dependsOn(processResources)
directoryBuild.dependsOn(processTestResources)
directoryBuild.dependsOn(spotbugsMain)
directoryBuild.dependsOn(spotbugsTest)
build.dependsOn directoryBuild

