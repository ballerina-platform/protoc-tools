/*
 * Copyright (c) 2022, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs'
}

description = 'Ballerina - protoc-tools Tooling Test'

def buildDir = "build";
def ballerinaDist = "$project.buildDir/jballerina-tools-${ballerinaLangVersion}"
def artifactLibParent = file("$project.rootDir/build/lib_parent/")
// external jar file which need to pack to distribution
def externalGoogleProtosCommonJar = file("$project.projectDir/src/test/resources/lib/proto-google-common-protos-${protoGoogleCommonsVersion}.jar")
def externalProtobufJavaJar = file("$project.projectDir/src/test/resources/lib/protobuf-java-${protobufJavaVersion}.jar")

configurations {
    balTools
    dist {
        transitive true
    }
}

dependencies {
    checkstyle project(':checkstyle')
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstylePluginVersion}"

    testImplementation group: 'org.apache.commons', name: 'commons-lang3', version: "${commonsLang3Version}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    testImplementation (group: 'org.ballerinalang', name: 'ballerina-cli', version: "${ballerinaLangVersion}") {
        exclude group: 'org.ballerinalang', module: 'maven-resolver'
    }
    testImplementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"
    testImplementation project(":protoc-cli")
    testImplementation project(":protoc-tool-idl-plugin")
    testImplementation group: 'org.testng', name: 'testng', version: "${testngVersion}"

    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
}

task jBallerinaPack {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}")
            }
        }
    }
    outputs.dir ballerinaDist
}

task unpackStdLibs() {
    dependsOn(jBallerinaPack)
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}/extracted-stdlibs/" + artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    dependsOn(unpackStdLibs)
    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${project.buildDir}/extracted-stdlibs/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

tasks.withType(Checkstyle) {
    exclude '**/module-info.java'
}

checkstyle {
    toolVersion "${project.checkstylePluginVersion}"
    configFile rootProject.file("build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile" : file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

checkstyleTest.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")

spotbugsTest {
    enabled false
    effort "max"
    reportLevel "low"
    reportsDir = file("$project.buildDir/reports/spotbugs")
    reports {
        html.enabled true
        text.enabled = true
    }
    def excludeFile = file("${rootDir}/spotbugs-exclude.xml")
    if(excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

spotbugsMain {
    enabled false
}

checkstyleMain {
    enabled false
}

task copyJar(type: Copy) {
    from "$project.rootDir/protoc-tool-idl-plugin/build/libs/protoc-tool-idl-plugin-${version}.jar"
    into "$ballerinaDist/bre/lib"

    from "$project.rootDir/protoc-cli/build/libs/protoc-cli-${version}.jar"
    into "$ballerinaDist/bre/lib"
}

task copyExternalJars {
    doLast {
        copy {
            from externalProtobufJavaJar
            into file("$artifactLibParent/libs")
            into "$ballerinaDist/bre/lib"
        }
        copy {
            from externalGoogleProtosCommonJar
            into file("$artifactLibParent/libs")
            into "$ballerinaDist/bre/lib"
        }
    }
}

test {
    dependsOn(copyStdlibs)
    systemProperties = [ "ballerina.home": ballerinaDist,
                         "ballerina.offline.flag": "true",
                         "target.dir": "$project.buildDir",
                         "ballerina.version": "jballerina-tools-${ballerinaLangVersion}"
    ]
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
    testLogging.showStandardStreams = true
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "${jacocoVersion}"
}

jacocoTestReport {
    dependsOn test
    def classFiles = new File("${rootDir}/protoc-cli/build/classes/java/main/io/ballerina/protoc")
    additionalClassDirs(classFiles)
    reports {
        xml.enabled true
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

copyJar.dependsOn ":protoc-tool-idl-plugin:build"
copyJar.dependsOn ":protoc-cli:build"
copyJar.dependsOn ":protoc-tool-idl-plugin:shadowJar"
test.dependsOn copyJar
test.dependsOn copyExternalJars
