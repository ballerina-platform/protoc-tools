/*
 * Copyright (c) 2022, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

plugins {
    id 'java-library'
    id 'checkstyle'
    id 'com.github.spotbugs'
}

description = 'Ballerina - protoc-tools Tooling Test'

def buildDir = "build";
def ballerinaDist = "$project.buildDir/jballerina-tools-${ballerinaLangVersion}"

configurations {
    balTools
    ballerinaStdLibs
    dist {
        transitive true
    }
}

dependencies {
    checkstyle project(':checkstyle')
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstylePluginVersion}"

    testImplementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    testImplementation (group: 'org.ballerinalang', name: 'ballerina-cli', version: "${ballerinaLangVersion}") {
        exclude group: 'org.ballerinalang', module: 'maven-resolver'
    }
    testImplementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"
    testImplementation project(":protoc-cli")
    testImplementation group: 'org.testng', name: 'testng', version: "${testngVersion}"

    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    ballerinaStdLibs "io.ballerina.stdlib:grpc-ballerina:${stdlibGrpcVersion}"
    // transitive dependencies
    ballerinaStdLibs "io.ballerina.stdlib:constraint-ballerina:${stdlibConstraintVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:io-ballerina:${stdlibIoVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:crypto-ballerina:${stdlibCryptoVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:time-ballerina:${stdlibTimeVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:http-ballerina:${stdlibHttpVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:log-ballerina:${stdlibLogVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:os-ballerina:${stdlibOsVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:file-ballerina:${stdlibFileVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:auth-ballerina:${stdlibAuthVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:cache-ballerina:${stdlibCacheVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:mime-ballerina:${stdlibMimeVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:task-ballerina:${stdlibTaskVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:jwt-ballerina:${stdlibJwtVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:uuid-ballerina:${stdlibUuidVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:oauth2-ballerina:${stdlibOAuth2Version}"
    ballerinaStdLibs "io.ballerina.stdlib:url-ballerina:${stdlibUrlVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:protobuf-ballerina:${stdlibProtobufVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:random-ballerina:${stdlibRandomVersion}"
    ballerinaStdLibs "io.ballerina.stdlib:observe-ballerina:${observeVersion}"
    ballerinaStdLibs "io.ballerina:observe-ballerina:${observeInternalVersion}"
}

task jBallerinaPack {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}")
            }
        }
    }
    outputs.dir ballerinaDist
}

task unpackStdLibs() {
    dependsOn(jBallerinaPack)
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}/extracted-stdlibs/" + artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    dependsOn(unpackStdLibs)
    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${project.buildDir}/extracted-stdlibs/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
    }
}

tasks.withType(Checkstyle) {
    exclude '**/module-info.java'
}

checkstyle {
    toolVersion "${project.checkstylePluginVersion}"
    configFile rootProject.file("build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile" : file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

checkstyleTest.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")

spotbugsTest {
    def classLoader = plugins["com.github.spotbugs"].class.classLoader
    def SpotBugsConfidence = classLoader.findLoadedClass("com.github.spotbugs.snom.Confidence")
    def SpotBugsEffort = classLoader.findLoadedClass("com.github.spotbugs.snom.Effort")
    effort = SpotBugsEffort.MAX
    reportLevel = SpotBugsConfidence.LOW
    reportsDir = file("$project.buildDir/reports/spotbugs")
    reports {
        html.enabled true
        text.enabled = true
    }
    def excludeFile = file("${rootDir}/spotbugs-exclude.xml")
    if(excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

spotbugsMain {
    enabled false
}

checkstyleMain {
    enabled false
}

test {
    dependsOn(copyStdlibs)
    systemProperty "ballerina.home", ballerinaDist
    systemProperty "ballerina.offline.flag", "true"
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
    testLogging.showStandardStreams = true
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "${jacocoVersion}"
}

jacocoTestReport {
    dependsOn test
    dependsOn ":protoc-cli:compileJava"
    def classFiles = new File("${rootDir}/protoc-cli/build/classes/java/main/io/ballerina/protoc")
    additionalClassDirs(classFiles)
    reports {
        xml.required = true
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

test.dependsOn ":protoc-cli:build"
